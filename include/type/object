#pragma once

#include <cstdint>
#include <cstddef>
#include <c7api>

#ifndef c7valuelimit
#define c7valuelimit 64
#endif

namespace type
{
    class c7api object
    {
    public:
        object();
        ~object();

        object clone() const;

        template <typename value_type>
        object(const value_type& value);

        template <typename value_type>
        object& operator = (const value_type& value);

        template <typename value_type>
        void set_as(const value_type& value);

        template <typename result_type>
        result_type get_as() const;

        template <typename result_type>
        operator result_type () const;

    protected:
        class holder;

    private:
        char m_buffer[c7valuelimit];
        holder* m_holder;
    };

    template <typename value_type>
    object::object(const value_type& value)
        : m_holder()
    {
        set_as(value);
    }

    template <typename value_type>
    object& object::operator = (const value_type& value)
    {
        set_as(value);
        return *this;
    }

    template <typename result_type>
    object::operator result_type () const
    {
        return get_as<result_type>();
    }

    template<> c7api void object::set_as(const std::nullptr_t&);

    template<> c7api void object::set_as(const std::int64_t&);
    template<> c7api void object::set_as(const std::int32_t&);
    template<> c7api void object::set_as(const std::int16_t&);
    template<> c7api void object::set_as(const std::int8_t&);

    template<> c7api void object::set_as(const std::uint64_t&);
    template<> c7api void object::set_as(const std::uint32_t&);
    template<> c7api void object::set_as(const std::uint16_t&);
    template<> c7api void object::set_as(const std::uint8_t&);

    template<> c7api void object::set_as(const double&);
    template<> c7api void object::set_as(const float&);

    template<> c7api std::int64_t object::get_as() const;
    template<> c7api std::int32_t object::get_as() const;
    template<> c7api std::int16_t object::get_as() const;
    template<> c7api std::int8_t  object::get_as() const;

    template<> c7api std::uint64_t object::get_as() const;
    template<> c7api std::uint32_t object::get_as() const;
    template<> c7api std::uint16_t object::get_as() const;
    template<> c7api std::uint8_t  object::get_as() const;

    template<> c7api double object::get_as() const;
    template<> c7api float  object::get_as() const;
}
