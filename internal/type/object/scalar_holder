#pragma once

#include <internal/type/object/object_holder>
#include <new>

namespace c7
{
    namespace type
    {
        template <typename value_type>
        class scalar_holder : public object::holder
        {
        public:
            scalar_holder(const value_type& value)
                : m_value(value)
            {
            }

            const value_type& get_value() const
            {
                return m_value;
            }

            value_type& get_value()
            {
                return m_value;
            }

            void set_value(const value_type& value)
            {
                m_value = value;
            }

            virtual object::holder* clone(void* buffer) const override
            {
                return new(buffer)scalar_holder(*this);
            }

        private:
            value_type m_value;
        };
    }
}
